name: "CI/CD"

on:
  # Only run when branches are pushed, and not when tags are pushed, to allow manual
  # creation of tags to manually control bumped versions:
  # https://github.com/orgs/community/discussions/25615#discussioncomment-3397691
  push:
    branches:
      - "**"
    tags:
      - "!**"

jobs:

  build-host:
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/${{ github.repository }}:build-host"
      env:
        PUID: "1001"
        PGID: "123"
        # From GitHub Actions debugging output:
        #     docker create ... --workdir
        #     /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
        #     ... -v "/home/runner/work":"/__w" ...
        CHECKOUT_DIR: "${{ github.workspace }}"
        PROJECT_GITHUB_PAT: "${{ secrets.PROJECT_GITHUB_PAT }}"
    permissions:
      packages: "write"
    steps:
      - name: "Checkout source from VCS"
        uses: "actions/checkout@master"
      - name: "Change checkout owner"
        run: >-
          chown -R ${PUID}:${PGID} ./
      - name: "Authenticate with the container registry"
        run: >-
          entrypoint make -e ./var/log/docker-login-GITHUB.log
      - name: "Update build host image"
        run: >-
          entrypoint make -C ./build-host/ -e
          DOCKER_IMAGE=ghcr.io/${GITHUB_REPOSITORY} release

  bump:
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/${{ github.repository }}:build-host"
      env:
        PUID: "1001"
        PGID: "123"
        CHECKOUT_DIR: "${{ github.workspace }}"
        GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"
        GPG_SIGNING_PRIVATE_KEY: "${{ secrets.GPG_SIGNING_PRIVATE_KEY }}"
        DOCKER_PASS: "${{ secrets.DOCKER_PASS }}"
        PROJECT_GITHUB_PAT: "${{ secrets.PROJECT_GITHUB_PAT }}"
    needs: "build-host"
    permissions:
      packages: "write"
    steps:

      # Shared/common set up
      - name: "Checkout source from VCS"
        uses: "actions/checkout@master"

      # Cache build artifacts to speed up CI runs
      - name: "Cache build resources"
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          # Increment to force clearing the cache
          cache-name: "v1"
        with:
          path: |
            ~/.local
            ./dist
          # Never get a cache hit to force always caching any upgraded dependencies
          # Use hashFiles to force venv recreation when dependencies change
          key: >-
            ${{ env.cache-name }}-${{ runner.os }}-3.10-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('tox.ini') }}-${{ github.sha }}
          # Always re-use the cache and then upgrade
          restore-keys: >-
            ${{ env.cache-name }}-${{ runner.os }}-3.10-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-
      - name: "Change checkout owner"
        run: >-
          chown -R ${PUID}:${PGID} ./

      - name: "Bump the version if publishing a release"
        run: >-
          entrypoint make -e BUILD_REQUIREMENTS=false build-bump build-wheel check-clean

  build-test:
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/${{ github.repository }}:build-host"
      env:
        PUID: "1001"
        PGID: "123"
        CHECKOUT_DIR: "${{ github.workspace }}"
        GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"
        GPG_SIGNING_PRIVATE_KEY: "${{ secrets.GPG_SIGNING_PRIVATE_KEY }}"
        DOCKER_PASS: "${{ secrets.DOCKER_PASS }}"
        PROJECT_GITHUB_PAT: "${{ secrets.PROJECT_GITHUB_PAT }}"
    needs: ["build-host", "bump"]
    permissions:
      packages: "write"
      checks: "write"
    strategy:
      matrix:
        PYTHON_MINORS:
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
    name: "build-test (python${{ matrix.PYTHON_MINORS }})"
    steps:

      # Shared/common set up
      - name: "Checkout source from VCS"
        uses: "actions/checkout@master"
      - name: "Cache build resources"
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          cache-name: "v1"
        with:
          path: |
            ~/.local
            ./dist
          key: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.PYTHON_MINORS }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('tox.ini') }}-${{ github.sha }}
          restore-keys: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.PYTHON_MINORS }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-
      - name: "Change checkout owner"
        # https://stackoverflow.com/a/58474340/624787
        run: >-
          chown -R ${PUID}:${PGID} ./ &&
          git config --global --add safe.directory
          /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      # Delegate the rest to the `./Makefile` to keep as much portable between CI
      # platforms

      - name: "Build the container image in which to run the tests"
        run: >-
          entrypoint make -e PYTHON_MINORS=${{ matrix.PYTHON_MINORS }}
          build-docker-${{ matrix.PYTHON_MINORS }}
      - name: "Run the tests and code checks inside the built container"
        run: >-
          entrypoint make -e PYTHON_MINORS=${{ matrix.PYTHON_MINORS }}
          test-docker-${{ matrix.PYTHON_MINORS }} check-clean

      # Upload build artifacts
      # https://github.com/actions/upload-artifact#usage
      - name: "Archive test suite reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "test-suite-reports"
          path: |
            ./build/*/pytest*
      # https://github.com/marketplace/actions/test-reporter#example
      - name: "Publish test suite report"
        uses: "dorny/test-reporter@main"
        if: "success() || failure()"    # run this step even if previous step failed
        with:
          name: "PyTest Test Suite (python${{ matrix.PYTHON_MINORS }})"
          path: >-
            ./build/*/pytest-junit.xml,
            ./build/*/prospector-xunit.xml
          reporter: "java-junit"
      - name: "Archive code coverage reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "code-coverage-reports"
          path: |
            ./build/*/.coverage*
            ./build/*/coverage*
            ./build/*/htmlcov*
      - name: "Archive linter reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "linter-reports"
          path: |
            ./build/*/prospector*

  release:
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/${{ github.repository }}:build-host"
      env:
        PUID: "1001"
        PGID: "123"
        CHECKOUT_DIR: "${{ github.workspace }}"
        CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        # Enable the GitHub CLI
        PROJECT_GITHUB_PAT: "${{ secrets.PROJECT_GITHUB_PAT }}"
        # Requires the secrets to be added to GitHub either through the web UI or the
        # GitHub CLI tool:
        # https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository
        GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"
        GPG_SIGNING_PRIVATE_KEY: "${{ secrets.GPG_SIGNING_PRIVATE_KEY }}"
        PYPI_PASSWORD: "${{ secrets.PYPI_PASSWORD }}"
        TEST_PYPI_PASSWORD: "${{ secrets.TEST_PYPI_PASSWORD }}"
        DOCKER_PASS: "${{ secrets.DOCKER_PASS }}"
    needs: ["build-host", "build-test"]
    permissions:
      packages: "write"
    steps:

      # Shared/common set up
      - name: "Checkout source from VCS"
        uses: "actions/checkout@master"
      - name: "Cache build resources"
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          cache-name: "v1"
        with:
          path: |
            ~/.local
            ./dist
          key: >-
            ${{ env.cache-name }}-${{ runner.os }}-3.10-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('tox.ini') }}-${{ github.sha }}
          restore-keys: >-
            ${{ env.cache-name }}-${{ runner.os }}-3.10-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-
      - name: "Change checkout owner"
        run: >-
          chown -R ${PUID}:${PGID} ./

      - name: "Publish release artifacts"
        run: >-
          entrypoint make -e BUILD_REQUIREMENTS=false release-python check-clean
      - name: "Archive built packages"
        uses: "actions/upload-artifact@master"
        with:
          name: "built-packages"
          path: |
            ./dist/prunerr-*
