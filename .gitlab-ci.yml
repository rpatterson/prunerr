# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

default:
  image:
    name: "$CI_REGISTRY_IMAGE:build-host"
    entrypoint:
      - "docker-entrypoint.sh"
  services:
    - "docker:dind"
  before_script:
    - "chown -R $PUID:$PGID ./"
  cache:
    # Increment `v#` in keys to clear those caches:
    - key: "tox-$CI_COMMIT_REF_SLUG-v1"
      paths:
        - "./.tox"
        - "./var/docker/*/.tox"

variables:
  # Secrets from the GitLab CI/CD Variables UI:
  CODECOV_TOKEN: "$CODECOV_TOKEN"
  DOCKER_PASS: "$DOCKER_PASS"
  GPG_PASSPHRASE: "$GPG_PASSPHRASE"
  GPG_SIGNING_PRIVATE_KEY: "$GPG_SIGNING_PRIVATE_KEY"
  PYPI_PASSWORD: "$PYPI_PASSWORD"
  TEST_PYPI_PASSWORD: "$TEST_PYPI_PASSWORD"
  PROJECT_GITHUB_PAT: "$PROJECT_GITHUB_PAT"

  # Variables controlling behavior:
  PUID: "1001"
  PGID: "1001"
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE"

  # Uncomment to get more debugging output:
  # DEBUG: "true"

stages:
  - "build-test"
  - "bump"
  - "release"
  - "scheduled"

build-test:
  stage: "build-test"
  rules:
    - if: >-
        $CI_COMMIT_TAG
      when: "never"
    - if: >-
        (
          $CI_COMMIT_REF_PROTECTED != "true" || $CI_COMMIT_TITLE !~
          /^build\(release\): Version [0-9]\.[0-9]\.[0-9][a-z0-9-.]* → [0-9]\.[0-9]\.[0-9][a-z0-9-.]*$/
        )
        && $CI_PIPELINE_SOURCE != "schedule"
  parallel:
    matrix:
      - PYTHON_MINORS:
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
  script:
    # Delegate steps agnostic of the CI/CD platform to the `./Makefile`:
    - >-
      entrypoint make -e build-docker-$PYTHON_MINORS test-docker-$PYTHON_MINORS
      release-docker-$PYTHON_MINORS check-clean
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    # Upload build artifacts:
    # https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html
    paths:
      - "./build/py*/pytest*"
      - "./build/py*/.coverage*"
      - "./build/py*/coverage*"
      - "./build/py*/htmlcov"
      - "./build/py*/prospector*"
      - "./build/py*/pylint*"
      - "./dist/prunerr-*"
    reports:
      junit:
        - "./build/py*/pytest-junit.xml"
        - "./build/py*/prospector-xunit.xml"
      coverage_report:
        coverage_format: "cobertura"
        path: "./build/py*/coverage.xml"

bump:
  stage: "bump"
  needs: ["build-test"]
  rules:
    - if: >-
        $CI_COMMIT_TAG
      when: "never"
    - if: >-
        (
          $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_TITLE !~
          /^build(release): Version [0-9].[0-9].[0-9][a-z0-9-.]* → [0-9].[0-9].[0-9][a-z0-9-.]*$/
        )
        && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - >-
      entrypoint make -e BUILD_REQUIREMENTS=false build-bump check-clean
  artifacts:
    paths:
      # TODO: GitLab CI/CD issues a warning when not on `develop` or `master` because it
      # isn't actually used, IOW this is an expected condition on feature branches:
      #     WARNING: ./NEWS-release.rst: no matching files. Ensure that the artifact path is relative to the working directory
      # Is there a way to make paths conditional?
      - "./NEWS-release.rst"
      - "./dist/prunerr-*"

release:
  stage: "release"
  rules:
    - if: >-
        $CI_COMMIT_REF_PROTECTED == "true" &&
        $CI_COMMIT_TAG =~ /^v[0-9]\.[0-9]\.[0-9][a-z0-9-.]*/
  script:
    - >-
      entrypoint make -e BUILD_REQUIREMENTS=false release-python check-clean
  artifacts:
    paths:
      - "./dist/prunerr-*"

scheduled:
  stage: "scheduled"
  rules:
    - if: >-
        $CI_PIPELINE_SOURCE == "schedule"
  script:
    - >-
      entrypoint make -e $SCHEDULED_TARGETS
