# SPDX-FileCopyrightText: 2023 Ross Patterson <me@rpatterson.net>
#
# SPDX-License-Identifier: MIT

# Override `$ docker compose` configuration for development or testing here in this
# repository checkout. Put everything used outside this checkout in
# `./docker-compose.yml`.
version: "3.8"

services:
  transmission:
    container_name: "prunerr-devel-transmission"
    volumes:
      # Exit the container if the core `s6-overlay` service fails
      - "./s6/etc/services.d/default/finish:/etc/services.d/transmission/finish"

  sonarr:
    container_name: "prunerr-devel-sonarr"
  radarr:
    container_name: "prunerr-devel-radarr"

  # Configuration specific to development:
  prunerr-daemon:
    image: "\
      ${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson\
      /prunerr:${PYTHON_ENV:-py311}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "prunerr-daemon-checkout"
    build:
      context: "${CHECKOUT_DIR:-.}/"
      target: "user"
      args:
        PYTHON_MINOR: "${PYTHON_MINOR:-3.11}"
        PYTHON_ENV: "${PYTHON_ENV:-py311}"
        VERSION: "${VERSION:-}"

  ## Contianers used for development and release:

  # Container for use by developers:
  prunerr-devel:
    image: "\
      ${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson\
      /prunerr:devel-${PYTHON_ENV:-py311}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "prunerr-devel"
    profiles:
      - "test"
    build:
      context: "${CHECKOUT_DIR:-.}/"
      target: "devel"
      args:
        PYTHON_MINOR: "${PYTHON_MINOR:-3.11}"
        PYTHON_ENV: "${PYTHON_ENV:-py311}"
        VERSION: "${VERSION:-}"
    environment:
      TZ: "${TZ:-Etc/UTC}"
      # Make the runtime user configurable in `./.env`:
      PUID: "${PUID:-1000}"
      PGID: "${PGID:-${PUID:-1000}}"
      # Variables from the environment to pass through into the container:
      CI: "${CI:-false}"
      # DEBUG: "true"
    volumes:
      # Reflect local changes inside the container:
      - "${CHECKOUT_DIR:-.}/bin/entrypoint.sh:/usr/local/bin/entrypoint.sh"
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/prunerr/"
      # Preserve user configuration, data, and caches between containers and variants:
      - "${CHECKOUT_DIR:-.}/home/.config/:/home/prunerr/.config/"
      - "${CHECKOUT_DIR:-.}/home/.local/share/:/home/prunerr/.local/share/"
      - "${CHECKOUT_DIR:-.}/home/.cache/:/home/prunerr/.cache/"
      # Avoid any clashes between image variants and the local host at both build and
      # runtime:
      - "${CHECKOUT_DIR:-.}/var-docker/${PYTHON_ENV:-py311}/\
        :/usr/local/src/prunerr/var/"
      - "${CHECKOUT_DIR:-.}/var-docker/${PYTHON_ENV:-py311}/.tox/\
        :/usr/local/src/prunerr/.tox/"
      - "${CHECKOUT_DIR:-.}/var-docker/${PYTHON_ENV:-py311}\
        /prunerr.egg-info/\
        :/usr/local/src/prunerr/src/prunerr.egg-info/"

  # https://github.com/hadolint/hadolint#how-to-use
  hadolint:
    image: "ghcr.io/hadolint/hadolint"
    profiles:
      - "test"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/prunerr/"
    working_dir: "/usr/local/src/prunerr/"
    command: >-
      hadolint "./Dockerfile"

  reuse:
    image: "docker.io/fsfe/reuse:latest-debian"
    profiles:
      - "lint"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    command: >-
      lint

  vale:
    image: "docker.io/jdkato/vale:v2.28.1"
    profiles:
      - "lint"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/prunerr"
    working_dir: "/usr/local/src/prunerr"
    command: >-
      .

  pandoc:
    image: "docker.io/pandoc/core"
    profiles:
      - "release"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    entrypoint: "ash"
    # Strip reStructuredText directives unsupported in Markdown before converting, for
    # example table of contents, and converted Markdown that isn't widely supported, for
    # example tables:
    command: >-
      -xeu -c '
        grep -Ev "^ *\.\. +(contents)::.*" "./README.rst" |
        pandoc -f "rst" -t "gfm" | grep -Ev "^(\+-+\+|\|.*\|)$" >"./README.md"
      '

  docker-pushrm:
    image: "chko/docker-pushrm"
    depends_on:
      pandoc:
        condition: "service_completed_successfully"
    profiles:
      - "release"
    environment:
      TZ: "${TZ:-Etc/UTC}"
      DOCKER_USER: "${DOCKER_USER:-}"
      DOCKER_PASS: "${DOCKER_PASS:-}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    command: >-
      --file "/data/var/README.md"
      --short "Perma-seed Servarr media libraries"
      --debug "${DOCKER_USER:-}/prunerr"

  gitlab-release-cli:
    image: "registry.gitlab.com/gitlab-org/release-cli:latest"
    profiles:
      - "release"
    environment:
      CI_JOB_TOKEN: "${CI_JOB_TOKEN:-}"
    volumes:
      - "./:/usr/local/src/prunerr/"
    working_dir: "/usr/local/src/prunerr/"

  ## Containers related to CI/CD:

  # The container that runs CI/CD:
  build-host:
    image: "\
      ${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson/prunerr\
      :build-host"
    profiles:
      - "ci"
    build: "${CHECKOUT_DIR:-.}/build-host/"
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${CHECKOUT_DIR:-.}/:${CHECKOUT_DIR:-.}"
      - "${CHECKOUT_DIR:-.}/build-host/bin/init-job.sh:/usr/local/bin/init-job.sh"
      - "${CHECKOUT_DIR:-.}/build-host/bin/entrypoint.sh:/usr/local/bin/entrypoint.sh"
      # Share local SSH authentication to repository remotes
      - "~/.ssh/:/home/runner/.ssh/"
    env_file: "./.env"
    environment:
      TZ: "${TZ:-Etc/UTC}"
      PUID: "${PUID:-1000}"
      PGID: "${DOCKER_GID:-${PGID:-${PUID:-1000}}}"
      # DEBUG: "true"
    working_dir: "${CHECKOUT_DIR:-.}"
    command: >-
      make -e test-lint build-docker test-docker release

  gitlab-runner:
    profiles:
      - "ci"
