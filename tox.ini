[tox]
envlist = py3
# https://tox.wiki/en/latest/example/package.html#setuptools
isolated_build = True

# Run the actual tests and checks for this package's code and content
[testenv]
extras = devel
deps = -rrequirements-devel.txt
commands =
# Fail fast.  Run quick tests and checks first to save time in the inner loop of
# development iteration.
    flake8 "./src/prunerr/"
# Many developers find pylint to be too opinionated.  For myself, I find it imensely
# helpful to keep me from being lazy, particularly when it comes to how I structure and
# factor my code.  The line below will cause failures in the commit/push hooks and in CI
# for any errors or warnings throughout the code base (excepting configuration or
# comments that exclude specific code).  Comment out or delete if Pylint isn't to your
# liking.
    pylint "./src/prunerr/"
    rstcheck -r "./README.rst" "./CONTRIBUTING.rst" "./TODO.rst" \
        "./src/prunerr/"
# Ensure this package is correctly installed into this environment.
    python -m "prunerr" --help
    prunerr --help
# Run more time consuming tests and checks last.
    coverage run
    coverage json --fail-under=0
    coverage lcov --fail-under=0
    coverage xml --fail-under=0
    coverage html --fail-under=0
    coverage report

# Build, release and development tools that can operate totally independently.
[testenv:build]
skip_install = true
deps = -rrequirements-build.txt
commands =
# Manage fixed/pinned versions in `./requirements*.txt`.  Has to be installed outside
# the container so that the resulting version pins can be baked into the container
# image.
    pip-compile --resolver=backtracking --upgrade --output-file="./requirements.txt" \
        "./pyproject.toml"
    pip-compile --resolver=backtracking --upgrade --extra="devel" \
        --output-file="./requirements-devel.txt" "./pyproject.toml"
    pip-compile --resolver=backtracking --upgrade \
        --output-file="./requirements-build.txt" "./requirements-build.txt.in"
