; SPDX-FileCopyrightText: 2023 Ross Patterson <me@rpatterson.net>
;
; SPDX-License-Identifier: MIT

[tox]
# https://devguide.python.org/versions/#supported-versions
envlist = py{310,311,39,38,37}
# https://tox.wiki/en/latest/example/package.html#setuptools
isolated_build = True

[testenv]
description = Run tests and checks for code and content
package = wheel
wheel_build_env = .pkg
extras = devel
deps = -rrequirements/{envname}/devel.txt
commands =
# Create a directory for artifacts not managed by `$ tox`:
    python -c 'import pathlib; \
        pathlib.Path("./build/{envname}").mkdir(parents=True, exist_ok=True)'
# Fail fast.  Run quick tests and checks first to save time in the inner loop of
# development iteration.
    pyroma --min="10" "./"
    black --check "./src/prunerr/"
# https://github.com/PyCQA/prospector/issues/599#issue-1600120419
    pylint --output-format \
        "colorized,parseable:{envdir}/pylint.parseable,json:{envdir}/pylint.json,msvs:{envdir}/pylint.msvs" \
        "./src/prunerr/"
# https://pawamoy.github.io/posts/python-static-code-analysis-tools/#prospector
    prospector \
        --output-format "emacs:./build/{envname}/prospector-emacs.txt" \
        --output-format "grouped:./build/{envname}/prospector-grouped.txt" \
        --output-format "json:./build/{envname}/prospector.json" \
        --output-format "pylint:./build/{envname}/prospector.pylint" \
        --output-format "text:./build/{envname}/prospector.txt" \
        --output-format "vscode:./build/{envname}/prospector-vscode.txt" \
        --output-format "xunit:./build/{envname}/prospector-xunit.xml" \
        --output-format "yaml:./build/{envname}/prospector.yaml" \
        --output-format "grouped" \
        "./src/prunerr/"
# https://github.com/PyCQA/prospector/issues/599#issue-1600120419
    vulture "./src/prunerr/"
# https://xenon.readthedocs.io/en/latest/#an-actual-example
    xenon --max-absolute "C" --max-modules "B" --max-average "A" \
        "./src/prunerr/"
# Check documentation as much a possible:
    rstcheck -r "./README.rst" "./CONTRIBUTING.rst" "./TODO.rst" \
        "./newsfragments/" "./build-host/"
# Check copyright and licensing:
    reuse lint
# Ensure this package is correctly installed into this environment.
    python -m "prunerr" --help
    prunerr --help
# Run more time consuming tests and checks last.
    coverage run --data-file="./build/{envname}/.coverage" -m pytest \
        --junit-xml="./build/{envname}/pytest-junit.xml" -s
    coverage json --fail-under=0 --data-file="./build/{envname}/.coverage" \
        -o "./build/{envname}/coverage.json"
    coverage lcov --fail-under=0 --data-file="./build/{envname}/.coverage" \
        -o "./build/{envname}/coverage-lcov.info"
    coverage xml --fail-under=0 --data-file="./build/{envname}/.coverage" \
        -o "./build/{envname}/coverage.xml"
    coverage html --fail-under=0 --data-file="./build/{envname}/.coverage" \
        -d "./build/{envname}/htmlcov"
    coverage report --data-file="./build/{envname}/.coverage"

[testenv:build]
description = Independent build, release, devel tools (requires PYTHON_HOST_ENV)
skip_install = true
deps = -rrequirements/{env:PYTHON_HOST_ENV:py310}/build.txt
commands =

[testenv:.pkg]
deps = build
